name: aws-deploy
description: Deploy infrastructure to AWS using terraform
inputs:
  aws_deployment_role:
    required: true
    description: The deployment role to assume

  aws_access_key_id:
    required: true
    description: The key id to connect to AWS

  docker_repo_token:
    required: true
    description: Repository token

  docker_repo_user:
    required: true
    description: Repository user

runs:
  using: composite
  steps:
      - name: Enter terraform folder
        shell: bash
        run: cd terraform

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{inputs.aws_deployment_role}}
          role-session-name: github-to-aws-via-oidc
          aws-region: eu-west-1
          role-skip-session-tagging: true
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.3"

      - name: Terraform Init
        shell: bash
        id: terraform-init
        env:
          TF_INPUT: 0      
          TF_VAR_session_management_docker_image: brunogino/iamind-session_management
          TF_VAR_docker_hub_token: ${{inputs.docker_repo_token}}
          TF_VAR_docker_hub_user: ${{inputs.docker_repo_user}}
          TF_VAR_access_key_id: ${{inputs.aws_access_key_id}}
        run: terraform init

      - name: Terraform Validate
        shell: bash
        id: terraform-validate
        run: terraform validate

      - name: Terraform Plan
        shell: bash
        id: terraform-plan
        run: terraform plan -lock=false
      
      - name: Terraform Apply
        shell: bash
        id: terraform-apply
        run: terraform apply -auto-approve -lock=false