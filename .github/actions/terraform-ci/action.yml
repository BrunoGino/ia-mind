name: terraform-ci
description: Validate terraform configuration
inputs:
  github_token:
    description: 'GitHub Token for authentication'
    required: true
  aws_deployment_role:
    required: true
    description: The deployment role to assume

runs:
  using: composite
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4        
      with:
        role-to-assume: ${{inputs.aws_deployment_role}}
        role-session-name: github-to-aws-via-oidc
        aws-region: eu-west-1
        role-skip-session-tagging: true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3        
      with:
        terraform_version: "1.10.3"

    - name: Terraform fmt
      id: fmt
      working-directory: terraform
      shell: bash
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      working-directory: terraform
      shell: bash
      run: terraform init

    - name: Terraform Validate
      id: validate
      working-directory: terraform
      shell: bash
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      working-directory: terraform
      shell: bash
      run: terraform plan -no-color
      continue-on-error: true

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          </details>
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })